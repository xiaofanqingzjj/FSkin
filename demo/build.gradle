apply plugin: 'com.android.application'
apply plugin: 'kotlin-android' // 使用kotlin-android插件
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion compile_sdk_version

    aaptOptions {
        // 生成资源id到资源名的映射文件
        additionalParameters "--emit-ids", "${project.file('public.txt')}"

    }

    defaultConfig {
        applicationId "com.tencent.fskin.demo"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation project(':fskin')
    implementation "com.android.support:appcompat-v7:$support_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:recyclerview-v7:$support_version"

    implementation 'com.github.xiaofanqingzjj:PermissionsRequestor:v1.0.0'

    implementation 'com.tencent:fskin:1.0.0'

//    implementation 'com.github.xiaofanqingzjj:FSkin:1.0.0'
}

final def TARGET_SKIN_DIR = '../skin-package/'
final def SAMPLE_NAME = 'Sample.apk'


gradle.projectsEvaluated {
    assembleRelease.doLast {
        println("=====================assembleRelease.doLast.begin.=========================")

        def dir = new File(TARGET_SKIN_DIR)
        if (!dir.exists()) {
            dir.mkdirs()
        }

        def f = new File(TARGET_SKIN_DIR + SAMPLE_NAME)
        if (f.exists()) {
            f.delete()
        }

        copy {
            from('build/outputs/apk')
            into(TARGET_SKIN_DIR)
            include '*.apk'
            exclude '**/*-unaligned.apk'
            rename('android-skin-loader-sample-release.apk', SAMPLE_NAME)
        }

        println("=====================assembleRelease.doLast success.=========================")
    }

    assembleDebug.doLast {
        println("=====================assembleDebug.doLast.begin.=========================")

        def dir = new File(TARGET_SKIN_DIR)
        if (!dir.exists()) {
            dir.mkdirs()
        }

        def f = new File(TARGET_SKIN_DIR + SAMPLE_NAME)
        if (f.exists()) {
            f.delete()
        }

        copy {
            from('build/outputs/apk')
            into(TARGET_SKIN_DIR)
            include '*.apk'
            exclude '**/*-unaligned.apk'
            rename('android-skin-loader-sample-debug.apk', SAMPLE_NAME)
        }

        println("=====================assembleDebug.doLast success.=========================")
    }
}